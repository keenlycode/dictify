{"mappings":"eAUqB,oBAANA,QAA0BA,OAAOC,iBAAgB,KAEpDC,EACAC,EA2MAC,EA7MAC,EAAQC,OAAOC,OAAO,MAGtBC,EAAc,WACdC,aAAaN,GACbA,EAAMO,WAAWR,EAAe,MAEhCS,EAAgB,aA8BhBC,EAAa,SAAaC,YAIjBC,EAAUC,OACXC,cACiBC,IAAjBF,EAAIG,SACJF,EAAID,GAEJC,EAAIG,SAASC,cAAa,MACxBC,KAAON,EAENC,EAAEE,SAASI,QAAO,KAAA,IAAaN,EAAEO,SAExCC,EACAC,EACAC,SACA1B,OAAO2B,iBACPH,EAAO,IAAOG,eACdF,EAASX,EAAUc,UACnBF,EAAUZ,EAAUD,GAEhBW,OAD4BP,IAA5BO,EAAQK,iBAAwC,KAAPH,GAAkBA,IAAYD,EAC7DK,qBAAkBb,EAElBU,gBAGXH,GAEPO,EAAO,+BACX7B,EAAa,eACL8B,EACAC,EAEAC,EACAb,EACAc,EAEAC,EACAZ,EACAX,EACAwB,EACAC,EALAC,EAAkB,WAMbC,IAtEK,IACVC,EAwEwB,IADxBF,GAAmB,KAEf5B,IAxERX,OAAOC,iBAAgB,SAAWO,GAAgB,GAClDR,OAAOC,iBAAgB,oBAAsBO,GAAgB,GACzDR,OAAO0C,mBACPD,EAAQ,IAAOC,iBAAiBlC,IACvBmC,QAAQxB,SAASyB,gBAAe,CACrCC,WAAW,EACXC,SAAS,EACTC,YAAY,IAEhBpC,EAAgB,eAER8B,EAASO,aACThD,OAAOiD,oBAAmB,SAAWzC,GAAgB,GACrDR,OAAOiD,oBAAmB,oBAAsBzC,GAAgB,SAC3D0C,QAGb/B,SAASyB,gBAAgB3C,iBAAgB,qBAAuBO,GAAgB,GAChFG,EAAgB,WACZQ,SAASyB,gBAAgBK,oBAAmB,qBAAuBzC,GAAgB,GACnFR,OAAOiD,oBAAmB,SAAWzC,GAAgB,GACrDR,OAAOiD,oBAAmB,oBAAsBzC,GAAgB,eAuD/D2C,EAAeC,sBAES,IAArB/C,EAAM+C,EAAKpB,QACXoB,EAAKC,MAAMC,eAAevB,EAAO,aAAc,IAAQqB,EAAKlB,MACxDkB,EAAKC,MAAME,aAAY,SACvBH,EAAKC,MAAMG,aAAY,OAAO,IAAQJ,EAAKlB,iBAKlDuB,EAAWC,yBAIRC,EAFAC,EAAOzC,SAASyC,KAChBC,EAAI1C,SAASC,cAAa,KAE9BsC,EAAII,OAAS,KACbD,EAAEE,UAAYL,EAAIM,cAClBL,EAAME,EAAEI,qBAAoB,OAAQ,MAEhCN,EAAIH,aAAY,cAAc,QAC9BG,EAAIO,MAAMC,SAAQ,WAClBR,EAAIO,MAAME,MAAQ,EAClBT,EAAIO,MAAMG,OAAS,EACnBV,EAAIO,MAAMI,SAAQ,SAClBV,EAAKW,aAAaZ,EAAKC,EAAKY,aAEhChC,cAGCiC,EAAef,qBAEhBA,EAAIgB,QAAU,KACdhB,EAAIiB,UAAY,KAChBnC,SAGR7B,IAEA0B,EAAOlB,SAAS8C,qBAAoB,OAC/B9B,EAAI,EAAGA,EAAIE,EAAKuC,OAAQzC,GAAK,EAAC,KAE3BF,EAAMI,EAAKF,GAAG0C,8BACT3B,GAELjB,GAAM,EAUVD,GAJInB,GAJJQ,EAAOgB,EAAKF,GAAG2C,aAAY,SAChBzC,EAAKF,GAAG4C,eAAehD,EAAO,SAC9BM,EAAKF,GAAG2C,aAAY,gBACnBzD,EAAK2D,MACP3D,EAAK2D,MAAK,KAEb,SAEI,GACX9C,EAAOrB,EAAI,GACXuB,EAAWH,GAAoB,IAAbA,EAAIgD,MAA4B,IAAdhD,EAAIiD,OAA2B,IAAZjD,EAAIkD,KAA4B,IAAflD,EAAImD,OACxEnD,GAAqB,IAAdA,EAAImC,OAA8B,IAAfnC,EAAIoC,SAAiBjC,GAO3CC,EAAKF,GAAGoB,aAAY,SACpBlB,EAAKF,GAAGmB,eAAevB,EAAO,aAAgBV,GAE9CW,EAAK4C,UAGO,KADZtC,EAAMjC,EAAM2B,KAGRtB,WAAWyC,EAAc,CACrBE,MAAOhB,EAAKF,GACZH,KAAMA,EACNE,KAAMA,IACN,QAEIjB,IAARqB,QAEgBrB,KADhBO,EAAUZ,EAAcoB,MAEpBM,EAAG,IAAOd,EACVnB,EAAM2B,GAAQM,EACdA,EAAIwB,OAASL,EAAWnB,GACxBA,EAAIoC,QAAUD,EAAenC,GAC7BA,EAAIqC,UAAYF,EAAenC,GAC/BA,EAAI+C,KAAI,MAAQrD,GAChBM,EAAIgD,OACJ/C,GAAmB,KAK1BH,EAWMJ,EAAK4C,QAAUvE,EAAM2B,IAC5BtB,WAAWyC,EAAc,CACrBE,MAAOhB,EAAKF,GACZH,KAAMA,EACNE,KAAMA,IACN,QAfgBjB,IAAhBZ,EAAM2B,GAEN3B,EAAM2B,IAAQ,EACP3B,EAAM2B,GAAM8B,SAGnBzD,EAAM2B,GAAMuD,eACLlF,EAAM2B,GAAM8B,OACnBzD,EAAM2B,IAAQ,GAW9BK,EAAI,GACJE,GAAmB,EACnBC,KAGJpC,EAAO,WACHJ,OAAOiD,oBAAmB,OAAS7C,GAAS,GAC5CD,EAAMO,WAAWR,EAAe,IAEb,aAAnBiB,SAASqE,WAETxF,OAAOC,iBAAgB,OAASG,GAAS,GAGzCA","sources":["docs-src/asset/icon/brand/svgxuse.js"],"sourcesContent":["/*!\n * @copyright Copyright (c) 2017 IcoMoon.io\n * @license   Licensed under MIT license\n *            See https://github.com/Keyamoon/svgxuse\n * @version   1.2.6\n */\n/*jslint browser: true */\n/*global XDomainRequest, MutationObserver, window */\n(function () {\n    \"use strict\";\n    if (typeof window !== \"undefined\" && window.addEventListener) {\n        var cache = Object.create(null); // holds xhr objects to prevent multiple requests\n        var checkUseElems;\n        var tid; // timeout id\n        var debouncedCheck = function () {\n            clearTimeout(tid);\n            tid = setTimeout(checkUseElems, 100);\n        };\n        var unobserveChanges = function () {\n            return;\n        };\n        var observeChanges = function () {\n            var observer;\n            window.addEventListener(\"resize\", debouncedCheck, false);\n            window.addEventListener(\"orientationchange\", debouncedCheck, false);\n            if (window.MutationObserver) {\n                observer = new MutationObserver(debouncedCheck);\n                observer.observe(document.documentElement, {\n                    childList: true,\n                    subtree: true,\n                    attributes: true\n                });\n                unobserveChanges = function () {\n                    try {\n                        observer.disconnect();\n                        window.removeEventListener(\"resize\", debouncedCheck, false);\n                        window.removeEventListener(\"orientationchange\", debouncedCheck, false);\n                    } catch (ignore) {}\n                };\n            } else {\n                document.documentElement.addEventListener(\"DOMSubtreeModified\", debouncedCheck, false);\n                unobserveChanges = function () {\n                    document.documentElement.removeEventListener(\"DOMSubtreeModified\", debouncedCheck, false);\n                    window.removeEventListener(\"resize\", debouncedCheck, false);\n                    window.removeEventListener(\"orientationchange\", debouncedCheck, false);\n                };\n            }\n        };\n        var createRequest = function (url) {\n            // In IE 9, cross origin requests can only be sent using XDomainRequest.\n            // XDomainRequest would fail if CORS headers are not set.\n            // Therefore, XDomainRequest should only be used with cross origin requests.\n            function getOrigin(loc) {\n                var a;\n                if (loc.protocol !== undefined) {\n                    a = loc;\n                } else {\n                    a = document.createElement(\"a\");\n                    a.href = loc;\n                }\n                return a.protocol.replace(/:/g, \"\") + a.host;\n            }\n            var Request;\n            var origin;\n            var origin2;\n            if (window.XMLHttpRequest) {\n                Request = new XMLHttpRequest();\n                origin = getOrigin(location);\n                origin2 = getOrigin(url);\n                if (Request.withCredentials === undefined && origin2 !== \"\" && origin2 !== origin) {\n                    Request = XDomainRequest || undefined;\n                } else {\n                    Request = XMLHttpRequest;\n                }\n            }\n            return Request;\n        };\n        var xlinkNS = \"http://www.w3.org/1999/xlink\";\n        checkUseElems = function () {\n            var base;\n            var bcr;\n            var fallback = \"\"; // optional fallback URL in case no base path to SVG file was given and no symbol definition was found.\n            var hash;\n            var href;\n            var i;\n            var inProgressCount = 0;\n            var isHidden;\n            var Request;\n            var url;\n            var uses;\n            var xhr;\n            function observeIfDone() {\n                // If done with making changes, start watching for chagnes in DOM again\n                inProgressCount -= 1;\n                if (inProgressCount === 0) { // if all xhrs were resolved\n                    unobserveChanges(); // make sure to remove old handlers\n                    observeChanges(); // watch for changes to DOM\n                }\n            }\n            function attrUpdateFunc(spec) {\n                return function () {\n                    if (cache[spec.base] !== true) {\n                        spec.useEl.setAttributeNS(xlinkNS, \"xlink:href\", \"#\" + spec.hash);\n                        if (spec.useEl.hasAttribute(\"href\")) {\n                            spec.useEl.setAttribute(\"href\", \"#\" + spec.hash);\n                        }\n                    }\n                };\n            }\n            function onloadFunc(xhr) {\n                return function () {\n                    var body = document.body;\n                    var x = document.createElement(\"x\");\n                    var svg;\n                    xhr.onload = null;\n                    x.innerHTML = xhr.responseText;\n                    svg = x.getElementsByTagName(\"svg\")[0];\n                    if (svg) {\n                        svg.setAttribute(\"aria-hidden\", \"true\");\n                        svg.style.position = \"absolute\";\n                        svg.style.width = 0;\n                        svg.style.height = 0;\n                        svg.style.overflow = \"hidden\";\n                        body.insertBefore(svg, body.firstChild);\n                    }\n                    observeIfDone();\n                };\n            }\n            function onErrorTimeout(xhr) {\n                return function () {\n                    xhr.onerror = null;\n                    xhr.ontimeout = null;\n                    observeIfDone();\n                };\n            }\n            unobserveChanges(); // stop watching for changes to DOM\n            // find all use elements\n            uses = document.getElementsByTagName(\"use\");\n            for (i = 0; i < uses.length; i += 1) {\n                try {\n                    bcr = uses[i].getBoundingClientRect();\n                } catch (ignore) {\n                    // failed to get bounding rectangle of the use element\n                    bcr = false;\n                }\n                href = uses[i].getAttribute(\"href\")\n                        || uses[i].getAttributeNS(xlinkNS, \"href\")\n                        || uses[i].getAttribute(\"xlink:href\");\n                if (href && href.split) {\n                    url = href.split(\"#\");\n                } else {\n                    url = [\"\", \"\"];\n                }\n                base = url[0];\n                hash = url[1];\n                isHidden = bcr && bcr.left === 0 && bcr.right === 0 && bcr.top === 0 && bcr.bottom === 0;\n                if (bcr && bcr.width === 0 && bcr.height === 0 && !isHidden) {\n                    // the use element is empty\n                    // if there is a reference to an external SVG, try to fetch it\n                    // use the optional fallback URL if there is no reference to an external SVG\n                    if (fallback && !base.length && hash && !document.getElementById(hash)) {\n                        base = fallback;\n                    }\n                    if (uses[i].hasAttribute(\"href\")) {\n                        uses[i].setAttributeNS(xlinkNS, \"xlink:href\", href);\n                    }\n                    if (base.length) {\n                        // schedule updating xlink:href\n                        xhr = cache[base];\n                        if (xhr !== true) {\n                            // true signifies that prepending the SVG was not required\n                            setTimeout(attrUpdateFunc({\n                                useEl: uses[i],\n                                base: base,\n                                hash: hash\n                            }), 0);\n                        }\n                        if (xhr === undefined) {\n                            Request = createRequest(base);\n                            if (Request !== undefined) {\n                                xhr = new Request();\n                                cache[base] = xhr;\n                                xhr.onload = onloadFunc(xhr);\n                                xhr.onerror = onErrorTimeout(xhr);\n                                xhr.ontimeout = onErrorTimeout(xhr);\n                                xhr.open(\"GET\", base);\n                                xhr.send();\n                                inProgressCount += 1;\n                            }\n                        }\n                    }\n                } else {\n                    if (!isHidden) {\n                        if (cache[base] === undefined) {\n                            // remember this URL if the use element was not empty and no request was sent\n                            cache[base] = true;\n                        } else if (cache[base].onload) {\n                            // if it turns out that prepending the SVG is not necessary,\n                            // abort the in-progress xhr.\n                            cache[base].abort();\n                            delete cache[base].onload;\n                            cache[base] = true;\n                        }\n                    } else if (base.length && cache[base]) {\n                        setTimeout(attrUpdateFunc({\n                            useEl: uses[i],\n                            base: base,\n                            hash: hash\n                        }), 0);\n                    }\n                }\n            }\n            uses = \"\";\n            inProgressCount += 1;\n            observeIfDone();\n        };\n        var winLoad;\n        winLoad = function () {\n            window.removeEventListener(\"load\", winLoad, false); // to prevent memory leaks\n            tid = setTimeout(checkUseElems, 0);\n        };\n        if (document.readyState !== \"complete\") {\n            // The load event fires when all resources have finished loading, which allows detecting whether SVG use elements are empty.\n            window.addEventListener(\"load\", winLoad, false);\n        } else {\n            // No need to add a listener if the document is already loaded, initialize immediately.\n            winLoad();\n        }\n    }\n}());\n"],"names":["window","addEventListener","checkUseElems","tid","winLoad","cache","Object","create","debouncedCheck","clearTimeout","setTimeout","unobserveChanges","createRequest","url","getOrigin","loc","a","undefined","protocol","document","createElement","href","replace","host","Request1","origin","origin2","XMLHttpRequest","location","withCredentials","XDomainRequest","xlinkNS","base","bcr","hash","i","isHidden","uses","xhr","inProgressCount","observeIfDone","observer","MutationObserver","observe","documentElement","childList","subtree","attributes","disconnect","removeEventListener","ignore","attrUpdateFunc","spec","useEl","setAttributeNS","hasAttribute","setAttribute","onloadFunc","xhr1","svg","body","x","onload","innerHTML","responseText","getElementsByTagName","style","position","width","height","overflow","insertBefore","firstChild","onErrorTimeout","onerror","ontimeout","length","getBoundingClientRect","getAttribute","getAttributeNS","split","left","right","top","bottom","open","send","abort","readyState"],"version":3,"file":"svgxuse.js.map"}